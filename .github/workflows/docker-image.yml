name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    # Primer Paso: tomamos todo el código que tenemos en nuestro repositorio.
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # Gestionamos el versionamiento automático de nuestra aplicación.
    - name: Git Semantic Version
      uses: PaulHatch/semantic-version@v4.0.3
      with:
        # Si el commit empieza con major: el versionado apunta a una versión mayor.
        major_pattern: "major:"
        minor_pattern: "feat:"
        # Fijamos el string que determina el versionado.
        format: "${major}.${minor}.${patch}-prerelease${increment}"
        # Con este ID podemos hacer referencia a este paso.
        id: version_step
        
    # Procedemos a autenticarnos en Docker Hub.
    - name: Docker Login
      env: 
        DOCKER_USER: ${{secrets.DOCKER_USER}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        # El plugin de versionado tiene un arreglo en la propiedad outputs
        # que contiene diversa información, entre las cuales se encuentra 
        # el string que contiene la nueva verisón
        NEW_VERSION: ${{steps.version_step.outputs.version}}
      run: |
        echo "Iniciando login"
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        echo "Fin del login"
        echo "New version: $NEW_VERSION"
        
    # Procedemos a construir la imagen.
    # - name: Build Docker Image
    #   run: |
    #     docker build -t gabrieldp/docker-graphql:0.0.2 .
    #     docker build -t gabrieldp/docker-graphql:latest .
        
    # # Procedemos a realizar el push de la imagen.
    # - name: Push Docker Image
    #   run: |
    #     docker push gabrieldp/docker-graphql:0.0.2
    #     docker push gabrieldp/docker-graphql:latest
